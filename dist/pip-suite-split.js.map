{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/ISplitService.ts","src/SplitService.ts","src/index.ts"],"names":[],"mappings":"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","file":"pip-suite-split.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export interface ISplitService {\n    forwardTransition(toState: any, fromState: any): boolean;\n    goToDesktopState(fromState: string): string;\n}\n\nexport interface ISplitProvider {\n    addTransitionSequence(sequence: string[], mobileStates?: MobileState[]): void;\n}\n\nexport class MobileState {\n    name: string;\n    toStateName: string;\n}","/// <reference path=\"../typings/tsd.d.ts\" />\n\nimport {\n    ISplitService,\n    ISplitProvider,\n    MobileState\n} from './ISplitService';\n\n{\n    const run = function (\n        $rootScope: ng.IRootScopeService, pipSplit: ISplitService, $state: ng.ui.IStateService\n    ) {\n        $rootScope.$on('$stateChangeStart',\n            (event, toState, toParams, fromState, fromParams) => {\n                // Split animation\n                const splitElements = $('.pip-split');\n\n                if (splitElements.length > 0) {\n                    splitElements.removeClass('pip-transition-forward');\n                    splitElements.removeClass('pip-transition-back');\n                    if (toState.name != fromState.name) {\n                        if (pipSplit.forwardTransition(toState, fromState)) {\n                            splitElements.addClass('pip-transition-forward');\n                        } else {\n                            splitElements.addClass('pip-transition-back');\n                        }\n                    }\n                }\n            }\n        );\n\n        const debounceResize = _.debounce(() => {\n            const toState = pipSplit.goToDesktopState($state.current.name);\n            if (toState) $state.go(toState, $state.current.params);\n        }, 100);\n\n        $rootScope.$on(pip.layouts.MainResizedEvent, (\n            event: ng.IAngularEvent,\n            breakpoints: pip.layouts.MediaBreakpointStatuses\n        ) => {\n            if (!breakpoints.xs) {\n                debounceResize();\n            }\n        });\n\n    }\n\n    class SplitService implements ISplitService {\n        constructor(\n            private transitionSequences: any,\n            private mobileStates: any\n        ) {}\n\n        public forwardTransition(toState, fromState) {\n            for (let i = 0; i < this.transitionSequences.length; i++) {\n                const toIndex = this.transitionSequences[i].indexOf(toState.name);\n                const fromIndex = this.transitionSequences[i].indexOf(fromState.name);\n\n                if (toIndex > -1) {\n                    return toIndex > fromIndex;\n                }\n            }\n\n            return false\n        }\n\n        public goToDesktopState(fromState: string): string {\n            for (let i = 0; i < this.mobileStates.length; i++) {\n                const fromIndex = _.findIndex(this.mobileStates[i], (state: MobileState) => {\n                    return state.name === fromState;\n                })\n\n                if (fromIndex > -1) {\n                    return this.mobileStates[i][fromIndex].toState;\n                }\n            }\n\n            return '';\n        }\n    }\n\n    class SplitProvider implements ISplitProvider {\n        private transitionSequences: any = [];\n        private mobileStates: any = [];\n        private _service: ISplitService;\n\n        constructor() {}\n\n        public addTransitionSequence(sequence: string[], mobileStates ? : MobileState[]) {\n            if (!_.isArray(sequence) || sequence.length == 0) {\n                throw new Error('Transition sequence must be an array of state names');\n            }\n\n            this.transitionSequences.push(sequence);\n            this.mobileStates.push(mobileStates);\n        }\n\n        public $get() {\n            \"ngInject\";\n\n            if (this._service == null)\n                this._service = new SplitService(this.transitionSequences, this.mobileStates);\n\n            return this._service;\n        }\n    }\n\n    angular.module('pipSplit', [])\n        .run(run)\n        .provider('pipSplit', SplitProvider);\n}","/// <reference path=\"../typings/tsd.d.ts\" />\n\nangular.module('pipSplit', []);\n\nimport './SplitService';\n\nexport * from './ISplitService';"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}